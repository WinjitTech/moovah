#!/usr/bin/pythonimport cgiimport jsonimport sqlite3import osimport timefrom stat import *from xml.etree import ElementTreeimport commandsfrom posixpath import dirnameimport subprocessimport httplib2form = cgi.FieldStorage()response =""print "Content-type: application/json \n\n"def CheckURLStatus(url):    try:        h = httplib2.Http()#res = conn.getresponse()        resp = h.request(url, 'HEAD')        status = resp[0]['status']        return status    except Exception,e:        return str(e)def SaveDataToFile(path,rootNode):    try:        sudoPassword = "winjit123"        command = "mkdir -p "+dirname(path)        #os.system('echo %s|sudo -S %s' % (sudoPassword, command))        p = subprocess.Popen('sudo -S '+command, shell=True, stdin=subprocess.PIPE)        out, err = p.communicate(input=sudoPassword)        command = "chmod 777 -R "+dirname(path)        p = subprocess.Popen('sudo -S '+command, shell=True, stdin=subprocess.PIPE)        out, err = p.communicate(input=sudoPassword)        tree = ElementTree.ElementTree(rootNode)        tree.write(path,encoding="UTF-8",xml_declaration="Content-type: application/octet-stream")        #print "File: "+path+" written."    except Exception,e:        print str(e)def ReadFilesInDir(path):    try:        rootNode = ElementTree.Element("root")        for root, dirs, files in os.walk(path):            #print root+ " => files: "+str(len(files)) + " dirs: "+str(len(dirs))            NewNode = ElementTree.Element("Folder")            NewNode.set("Path",root)            for f in files:                responseFile = ElementTree.Element('File')                responseFile.set("FileName",str(f))                responseFile.set("Path",str(root+"/"+f))                responseFile.set("LastModifiedDate",str(time.ctime(os.path.getmtime(root+"/"+f))))                responseFile.set("Size",str(os.path.getsize(root+"/"+f)))                responseFile.set("Permissions",str(oct(os.stat(root+"/"+f)[ST_MODE])[-3:]))                NewNode.append(responseFile)            rootNode.append(NewNode)        return rootNode    except Exception, e:        print {'error': str(e)}def GetDirInfoTree(RootFolder,OutPutFile):    try:        xmldata = ReadFilesInDir(RootFolder)        SaveDataToFile(OutPutFile,xmldata)    except Exception,e:        print str(e)def GenerateDeviceReportZip():    try:        GetDirInfoTree("/home/pi/AutoUpdate/","/tmp/dig/AutoUpdate.xml")        GetDirInfoTree("/usr/lib/cgi-bin/","/tmp/dig/cgi.xml")        GetDirInfoTree("/var/log/Apache2/","/tmp/dig/Apache2Log.xml")        GetDirInfoTree("/var/log/squid3/","/tmp/dig/Squid3Log.xml")        GetDirInfoTree("/etc/r.local","/tmp/dig/RCLocal.xml")        GetDirInfoTree("/etc/squid3/","/tmp/dig/Squid3.xml")        commands.getoutput("rm -f /media/usb0/moovah/dignostics.tar.gz")        apache2Status = commands.getoutput("service apache2 status")        squid3Status = commands.getoutput("service squid3 status")        DefaultLogTail = commands.getoutput("tail /home/pi/default.log")        DeviceSpace = commands.getoutput("df -h")        InternetStatus = CheckURLStatus("http://moovahapp.com/Live/")        commands.getoutput("rm -f /media/usb0/moovah/dignostics.tar.gz")        with open("/tmp/dig/Services.txt", "w") as myfile:                    myfile.write("Apache2 Status :"+str(apache2Status)+"\n")                    myfile.write("Squid3 Status :"+str(squid3Status)+"\n")                    myfile.write("Internet Status :" + str(InternetStatus)+ "\n")                    myfile.write("DefaultLog Trail :"+str(DefaultLogTail)+"\n")                    myfile.write("Device Space :"+str(DeviceSpace)+"\n")        sudoPassword = "winjit123"        command = "tar -zcvf /media/usb0/moovah/dignostics.tar.gz /tmp/dig"        p = subprocess.Popen('sudo -S '+command, shell=True, stdin=subprocess.PIPE)        out, err = p.communicate(input=sudoPassword)        response = {"DownloadFile":"http://192.168.5.1/dignostics.tar.gz"}        print json.JSONEncoder().encode(response)    except Exception,e:        response = {"Error in GetFileInfo: ":str(e)}        print json.JSONEncoder().encode(response)